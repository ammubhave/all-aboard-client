{"version":3,"sources":["app/components/jaipur/camel_card.png","app/components/jaipur/cloth_card.png","app/components/jaipur/cover_card.png","app/components/jaipur/diamond_card.png","app/components/jaipur/gold_card.png","app/components/jaipur/leather_card.png","app/components/jaipur/silver_card.png","app/components/jaipur/spice_card.png","app/components/jaipur/coin.png","app/scenes/Home/styles.tsx","app/scenes/Home/index.tsx","app/components/sequence/constants.tsx","app/components/sequence/SequenceHand.tsx","app/components/splendor/SplendorHand.tsx","app/components/jaipur/styles.tsx","app/components/jaipur/utils.tsx","app/components/jaipur/JaipurHand.tsx","app/config/constants.tsx","app/components/codenames/CodenamesHand.tsx","app/scenes/Hand/index.tsx","app/components/sequence/SequenceBoard.tsx","app/components/splendor/SplendorBoard.tsx","app/components/jaipur/renderBoardMat.tsx","app/components/jaipur/JaipurBoard.tsx","app/components/codenames/styles.tsx","app/components/codenames/CodenamesBoard.tsx","app/scenes/Board/index.tsx","App.tsx","web-build/register-service-worker.js","app/components/jaipur/bonus_3_token.png","app/components/jaipur/bonus_4_token.png","app/components/jaipur/bonus_5_token.png","app/components/jaipur/camel_token.png","app/components/jaipur/cloth_token.png","app/components/jaipur/diamond_token.png","app/components/jaipur/gold_token.png","app/components/jaipur/leather_token.png","app/components/jaipur/seal_of_excellence.png","app/components/jaipur/silver_token.png","app/components/jaipur/spice_token.png","app/components/splendor/board.jpg","app/components/jaipur/camel-char.png"],"names":["module","exports","styles","StyleSheet","create","container","flex","margin","title","textAlign","marginVertical","fixToText","flexDirection","justifyContent","input","height","borderColor","borderWidth","separator","borderBottomColor","borderBottomWidth","hairlineWidth","Home","props","state","playerName","gameCode","selectedGame","password","SafeAreaView","style","View","Text","TextInput","onChangeText","setState","value","this","Picker","selectedValue","onValueChange","itemValue","itemIndex","Item","label","disabled","onPress","navigation","navigate","gameName","React","Component","CARD_TO_CHAR","getCardColor","card","suit","getCardChar","SequenceHand","hand","ScreenOrientation","lockAsync","OrientationLock","LANDSCAPE","unlockAsync","Object","keys","length","console","log","char","fontSize","color","map","renderCard","ScrollView","marginTop","horizontal","renderHand","alignItems","SplendorHand","onReservedCardPress","reservedCardIndex","onAction","handCards","green","count","prestige","blue","red","white","black","currentPlayerIndex","handCoins","gold","reservedCards","cost","push","display","entries","sort","backgroundColor","borderRadius","lineHeight","paddingLeft","fontWeight","textShadowRadius","textShadowColor","padding","TouchableHighlight","underlayColor","getBackgroundColor","forecolor","WIDTH","scale_pct","undefined","HEIGHT","MIN_WIDTH_HEIGHT","Math","min","Dimensions","get","width","RANGE","lo","hi","len","Array","fill","_","i","mat","mat_strips","position","mat_strip_circle","round","mat_card","paddingHorizontal","paddingTop","paddingBottom","mat_discard_pile","textAlignVertical","mat_card_glow","shadowColor","shadowRadius","shadowOpacity","mat_grey_cover","right","top","mat_goods_token_track","mat_bonus_token_track","shadowOffset","token","overflow","buttonPanel","left","alignContent","goodsTokenTrack","bottom","bonusTokenTrack","Card","cardTypeToImage","require","rootProps","isSelectable","TouchableOpacity","children","flip","transform","rotateX","rotateY","ImageBackground","source","type","selected","Coin","Token","tokenTypeToImage","rotateZ","Button","JaipurHand","handIsSelected","displayText","index","isSelected","Image","resizeMode","marginHorizontal","SERVER_URI","CodenamesHand","Hand","action","a","async","socket","emit","createRef","socketIOClient","query","route","params","on","current","updateHand","close","HandImpl","ref","SequenceBoard","cell","numberOfLines","adjustsFontSizeToFit","renderCardRow","row","board","layout","currentPlayer","PORTRAIT_UP","players","onStart","SplendorBoard","onCardPress","rowIndex","colIndex","onCoinPress","onNoblePress","nobleIndex","faceupCards","coins","nobles","renderCoinCost","paddingRight","getBackgroundColorCardCoin","filter","val","noble","unshift","renderCardCost","cardCell","cardRow","coinCell","nobleCell","renderCoinCell","renderCoin","renderNoble","BoardMapStrip","BoardMapStripCircle","BoardMatCard","glow","BoardCamel","opacity","BoardGoodsTokenTrack","BoardBonusTokenTrack","JaipurBoard","goodsTokenTrackTop","goodsTokenTrackBottom","bonusTokenTrackTop","bonusTokenTrackBottom","playerStates","sealsOfExcellence","camels","hasCamelToken","rupees","goodsTokens","diamond","silver","cloth","spice","leather","bonusTokens","bonus_3","bonus_4","bonus_5","market","marketIsSelected","marketIsSelectable","topDiscard","drawPileHasCards","camelToken","buttons","renderBoardMat","onBack","j","playerIndex","getButton","CodenamesBoard","renderPlayerList","team","teamName","renderPlayerSelection","Board","goBack","updateBoard","updatePlayers","BoardImpl","disableYellowBox","RootStack","createStackNavigator","App","NavigationContainer","Navigator","headerMode","Screen","name","component","options","headerShown","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.3dcca13f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/camel_card.a1e5c2c9.png\";","module.exports = __webpack_public_path__ + \"static/media/cloth_card.0d2307d0.png\";","module.exports = __webpack_public_path__ + \"static/media/cover_card.3f00f8c9.png\";","module.exports = __webpack_public_path__ + \"static/media/diamond_card.04b067c8.png\";","module.exports = __webpack_public_path__ + \"static/media/gold_card.f45f8f0b.png\";","module.exports = __webpack_public_path__ + \"static/media/leather_card.a9ca0b3b.png\";","module.exports = __webpack_public_path__ + \"static/media/silver_card.d1251adf.png\";","module.exports = __webpack_public_path__ + \"static/media/spice_card.5d184b27.png\";","module.exports = __webpack_public_path__ + \"static/media/coin.f17a00ff.png\";","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        margin: 10\n    },\n    title: {\n        textAlign: 'center',\n        marginVertical: 8,\n    },\n    fixToText: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    input: {\n        margin: 15,\n        height: 40,\n        borderColor: '#7a42f4',\n        borderWidth: 1\n    },\n    separator: {\n        marginVertical: 8,\n        borderBottomColor: '#737373',\n        borderBottomWidth: StyleSheet.hairlineWidth,\n    },\n});\n\nexport default styles;","import React from 'react';\nimport { TextInput, Button, SafeAreaView, View, Picker, Text } from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\n\nimport { RootStackParamList } from '../../../App';\nimport styles from './styles';\n\ntype HomeScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Home'>;\ntype Props = { navigation: HomeScreenNavigationProp; };\n\ntype State = {\n    playerName: string;\n    gameCode: string;\n    selectedGame: string;\n    password: string;\n};\n\nexport default class Home extends React.Component<Props, State> {\n    constructor(props: Readonly<Props>) {\n        super(props);\n\n        this.state = {\n            playerName: \"\",\n            gameCode: \"\",\n            selectedGame: \"jaipur\",\n            password: \"\",\n        };\n    }\n\n    render() {\n        return (\n            <SafeAreaView style={styles.container}>\n                <KeyboardAwareScrollView>\n                    <View>\n                        <Text>Server Password</Text>\n                        <TextInput\n                            onChangeText={password => this.setState({ password })}\n                            value={this.state.password}\n                            style={styles.input}\n                        />\n                    </View>\n                    <View>\n                        <Text>Game Code</Text>\n                        <TextInput\n                            onChangeText={gameCode => this.setState({ gameCode })}\n                            value={this.state.gameCode}\n                            style={styles.input}\n                        />\n                    </View>\n                    <View>\n                        <Picker\n                            selectedValue={this.state.selectedGame}\n                            onValueChange={(itemValue, itemIndex) => this.setState({ selectedGame: itemValue })}\n                        >\n                            <Picker.Item label=\"Jaipur\" value=\"jaipur\" />\n                            {/* <Picker.Item label=\"Splendor\" value=\"splendor\" /> */}\n                            {/* <Picker.Item label=\"Codenames\" value=\"codenames\" /> */}\n                        </Picker>\n                    </View>\n                    <View>\n                        <Button\n                            title=\"Board View\"\n                            disabled={this.state.gameCode === \"\"}\n                            onPress={() => this.props.navigation.navigate('Board', { gameName: this.state.selectedGame, gameCode: this.state.gameCode, password: this.state.password })}\n                        />\n                    </View>\n                    <View>\n                        <TextInput\n                            onChangeText={playerName => this.setState({ playerName })}\n                            value={this.state.playerName}\n                            style={styles.input}\n                        />\n                        <Button\n                            title=\"User View\"\n                            disabled={this.state.playerName === \"\" || this.state.playerName === \"board\" || this.state.gameCode === \"\"}\n                            onPress={() => this.props.navigation.navigate('Hand', { playerName: this.state.playerName, gameName: this.state.selectedGame, gameCode: this.state.gameCode, password: this.state.password })}\n                        />\n                    </View>\n                </KeyboardAwareScrollView>\n            </SafeAreaView>);\n    }\n}\n","const CARD_TO_CHAR = {\r\n    'SA': \"🂡\",\r\n    \"S2\": \"🂢\",\r\n    \"S3\": \"🂣\",\r\n    \"S4\": \"🂤\",\r\n    \"S5\": \"🂥\",\r\n    \"S6\": \"🂦\",\r\n    \"S7\": \"🂧\",\r\n    \"S8\": \"🂨\",\r\n    \"S9\": \"🂩\",\r\n    \"ST\": \"🂪\",\r\n    \"SJ\": \"🂫\",\r\n    \"SQ\": \"🂭\",\r\n    \"SK\": \"🂮\",\r\n    'HA': \"🂱\",\r\n    \"H2\": \"🂲\",\r\n    \"H3\": \"🂳\",\r\n    \"H4\": \"🂴\",\r\n    \"H5\": \"🂵\",\r\n    \"H6\": \"🂶\",\r\n    \"H7\": \"🂷\",\r\n    \"H8\": \"🂸\",\r\n    \"H9\": \"🂹\",\r\n    \"HT\": \"🂺\",\r\n    \"HJ\": \"🂻\",\r\n    \"HQ\": \"🂽\",\r\n    \"HK\": \"🂾\",\r\n    'DA': \"🃁\",\r\n    \"D2\": \"🃂\",\r\n    \"D3\": \"🃃\",\r\n    \"D4\": \"🃄\",\r\n    \"D5\": \"🃅\",\r\n    \"D6\": \"🃆\",\r\n    \"D7\": \"🃇\",\r\n    \"D8\": \"🃈\",\r\n    \"D9\": \"🃉\",\r\n    \"DT\": \"🃊\",\r\n    \"DJ\": \"🃋\",\r\n    \"DQ\": \"🃍\",\r\n    \"DK\": \"🃎\",\r\n    'CA': \"🃑\",\r\n    \"C2\": \"🃒\",\r\n    \"C3\": \"🃓\",\r\n    \"C4\": \"🃔\",\r\n    \"C5\": \"🃕\",\r\n    \"C6\": \"🃖\",\r\n    \"C7\": \"🃗\",\r\n    \"C8\": \"🃘\",\r\n    \"C9\": \"🃙\",\r\n    \"CT\": \"🃚\",\r\n    \"CJ\": \"🃛\",\r\n    \"CQ\": \"🃝\",\r\n    \"CK\": \"🃞\",\r\n    \"XX\": \"🂠\",\r\n};\r\n\r\nexport function getCardColor(card: string) {\r\n    let suit = card[0];\r\n    if (suit == \"X\") {\r\n        return \"purple\";\r\n    } else if (suit == \"H\" || suit == \"D\") {\r\n        return \"red\";\r\n    } else {\r\n        return \"black\";\r\n    }\r\n}\r\n\r\nexport function getCardChar(card: string) {\r\n    return CARD_TO_CHAR[card];\r\n}\r\n","import React from 'react';\r\nimport { View, Text, SafeAreaView, ScrollView } from 'react-native';\r\nimport { ScreenOrientation } from 'expo';\r\nimport { getCardColor, getCardChar } from '../../components/sequence/constants';\r\nimport BaseHand, { HandProps } from '../BaseHand';\r\n\r\ntype State = {\r\n    hand: {\r\n        hand: string[],\r\n    }\r\n};\r\n\r\nexport default class SequenceHand extends React.Component<HandProps, State> implements BaseHand<State> {\r\n    constructor(props: HandProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hand: {\r\n                hand: []\r\n            }\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE);\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await ScreenOrientation.unlockAsync();\r\n    }\r\n\r\n    updateHand(hand: any) {\r\n        if (Object.keys(hand).length === 0)\r\n            return;\r\n        console.log(hand);\r\n        this.setState({ hand });\r\n    }\r\n\r\n    renderCard(card: string) {\r\n        const char = getCardChar(card);\r\n        return <Text style={{ fontSize: 148, color: getCardColor(card) }}>\r\n            {char ?? card}\r\n        </Text>\r\n    }\r\n\r\n    renderHand() {\r\n        return this.state.hand.hand.map(this.renderCard);\r\n    }\r\n\r\n    render() {\r\n        return <SafeAreaView style={{ flex: 1 }}>\r\n            <ScrollView style={{ flex: 3, marginTop: 9 }} horizontal={true}>\r\n                {this.renderHand()}\r\n            </ScrollView>\r\n            <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n                <Text>Hello</Text>\r\n            </View>\r\n        </SafeAreaView>\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { View, Text, SafeAreaView, ScrollView, TouchableHighlight } from 'react-native';\r\nimport { ScreenOrientation } from 'expo';\r\nimport { getCardColor, getCardChar } from '../../components/sequence/constants';\r\nimport BaseHand, { HandProps } from '../BaseHand';\r\n\r\n\r\ntype Card = {\r\n    color: string,\r\n    prestige: number,\r\n    cost: { white: number, black: number, red: number, blue: number, green: number }\r\n}\r\n\r\ntype Noble = {\r\n    cost: { color: string, count: number }[],\r\n    prestige: number,\r\n}\r\n\r\ntype HandCardInfo = {\r\n    count: number,\r\n    prestige: number,\r\n};\r\n\r\ntype HandCards = {\r\n    green: HandCardInfo,\r\n    blue: HandCardInfo,\r\n    red: HandCardInfo,\r\n    white: HandCardInfo,\r\n    black: HandCardInfo,\r\n};\r\n\r\ntype HandCoins = {\r\n    green: number,\r\n    blue: number,\r\n    red: number,\r\n    white: number,\r\n    black: number,\r\n    gold: number,\r\n};\r\n\r\ntype Hand = {\r\n    handCards: HandCards,\r\n    currentPlayerIndex: number,\r\n    handCoins: HandCoins,\r\n    reservedCards: Card[],\r\n    nobles: Noble[],\r\n}\r\n\r\ntype State = Hand;\r\n\r\nexport default class SplendorHand extends React.Component<HandProps, State> implements BaseHand<State> {\r\n    constructor(props: HandProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            handCards: {\r\n                green: {\r\n                    count: 0,\r\n                    prestige: 0,\r\n                },\r\n                blue: {\r\n                    count: 0,\r\n                    prestige: 0,\r\n                },\r\n                red: {\r\n                    count: 0,\r\n                    prestige: 0,\r\n                },\r\n                white: {\r\n                    count: 0,\r\n                    prestige: 0,\r\n                },\r\n                black: {\r\n                    count: 0,\r\n                    prestige: 0,\r\n                },\r\n            },\r\n            currentPlayerIndex: -1,\r\n            handCoins: {\r\n                green: 0, blue: 0, red: 0, white: 0, black: 0, gold: 0\r\n            },\r\n            reservedCards: [{ color: \"green\", prestige: 3, cost: { white: 1, green: 1, blue: 2, red: 4, black: 0 } }]\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE);\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await ScreenOrientation.unlockAsync();\r\n    }\r\n\r\n    updateHand(hand: Hand) {\r\n        // this.setState(hand);\r\n    }\r\n\r\n    getBackgroundColor(color: string) {\r\n        switch (color) {\r\n            case 'white':\r\n                return 'rgba(255,255,255,0.8)';\r\n            case 'black':\r\n                return 'rgba(20,20,20,1)';\r\n            case 'red':\r\n                return 'rgba(255,0,0,0.5)';\r\n            case 'blue':\r\n                return 'rgba(0,0,255,0.5)';\r\n            case 'green':\r\n                return 'rgba(0,128,0,0.5)';\r\n            case 'gold':\r\n                return 'rgba(255,215,0,0.5)';\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    onReservedCardPress = (reservedCardIndex: number) => {\r\n        this.props.onAction(reservedCardIndex);\r\n    }\r\n\r\n    render() {\r\n        const { handCards, currentPlayerIndex, handCoins, reservedCards } = this.state;\r\n        while (reservedCards.length < 3) {\r\n            reservedCards.push(null);\r\n        }\r\n\r\n        return <SafeAreaView style={{ flex: 1 }}>\r\n            <View style={{ flex: 1, flexDirection: \"row\", display: \"flex\" }}>\r\n                {Object.entries(handCards).sort().map(([color, card]) => {\r\n                    let backgroundColor = color;\r\n                    if (backgroundColor === \"black\") {\r\n                        backgroundColor = \"rgb(50,50,50)\";\r\n                    }\r\n\r\n                    return <View style={{\r\n                        flex: 1,\r\n                        backgroundColor: backgroundColor,\r\n                        borderRadius: 10,\r\n                        borderWidth: 1,\r\n                        borderColor: '#fff',\r\n                    }}>\r\n                        <View style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            flex: 1,\r\n                        }}>\r\n                            <View style={{ flex: 1, backgroundColor: \"rgba(255, 255, 255, 0.7)\" }}>\r\n                                <Text style={{ flex: 1, lineHeight: \"60%\", fontSize: 50, paddingLeft: \"6%\", color: \"white\", fontWeight: \"800\", textShadowRadius: 5, textShadowColor: \"black\" }}>\r\n                                    {card.prestige}\r\n                                </Text>\r\n                            </View>\r\n                            <View style={{ flex: 1, display: \"flex\", padding: \"3%\", backgroundColor: \"rgba(0,0,0,0.3)\" }}>\r\n                                <Text style={{ flex: 1, lineHeight: \"60%\", textAlign: \"right\", fontSize: 50, paddingLeft: \"6%\", color: \"white\", fontWeight: \"800\", textShadowRadius: 5, textShadowColor: \"black\" }}>\r\n                                    {card.count}\r\n                                </Text>\r\n                            </View>\r\n                        </View>\r\n                    </View>;\r\n                })}\r\n            </View>\r\n            <View style={{ flex: 1, flexDirection: \"row\", display: \"flex\" }}>\r\n                {Object.entries(handCoins).sort().map(([color, count]) => {\r\n                    let backgroundColor = color;\r\n                    if (backgroundColor === \"black\") {\r\n                        backgroundColor = \"rgb(50,50,50)\";\r\n                    }\r\n\r\n                    return <View style={{\r\n                        flex: 1,\r\n                        backgroundColor: backgroundColor,\r\n                        margin: 15,\r\n                        borderRadius: \"50%\",\r\n                        borderWidth: 5,\r\n                        borderColor: 'black',\r\n                    }}>\r\n                        <View style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            flex: 1,\r\n                        }}>\r\n                            <View style={{ flex: 1, backgroundColor: \"rgba(255, 255, 255, 0.7)\" }}>\r\n                                <Text style={{ flex: 1, lineHeight: \"75%\", textAlign: \"center\", fontSize: 50, paddingLeft: \"6%\", color: \"white\", fontWeight: \"800\", textShadowRadius: 5, textShadowColor: \"black\" }}>\r\n                                    {count}\r\n                                </Text>\r\n                            </View>\r\n                        </View>\r\n                    </View>;\r\n                })}\r\n            </View>\r\n            <View style={{ flex: 1, flexDirection: \"row\", display: \"flex\" }}>\r\n                <View style={{ flex: 2 }}>\r\n                    <Text>Hello</Text>\r\n                </View>\r\n                {reservedCards.map((card, reservedCardIndex) => {\r\n                    if (card === null) {\r\n                        return <View style={{ flex: 1 }}></View>;\r\n                    }\r\n                    let backgroundColor = card.color;\r\n                    if (backgroundColor === \"black\") {\r\n                        backgroundColor = \"rgb(50,50,50)\";\r\n                    }\r\n\r\n                    return <TouchableHighlight style={{\r\n                        flex: 1,\r\n                        backgroundColor: backgroundColor,\r\n                        borderRadius: 10,\r\n                        borderWidth: 1,\r\n                        borderColor: '#fff',\r\n                    }}\r\n\r\n                        onPress={() => this.onReservedCardPress(reservedCardIndex)}\r\n                        underlayColor='#fff'>\r\n                        <View style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            flex: 1,\r\n                        }}>\r\n                            <View style={{ flex: 1, backgroundColor: \"rgba(255, 255, 255, 0.7)\" }}>\r\n                                <Text style={{ flex: 1, lineHeight: \"60%\", fontSize: 50, paddingLeft: \"6%\", color: \"white\", fontWeight: \"800\", textShadowRadius: 5, textShadowColor: \"black\" }}>\r\n                                    {card.prestige}\r\n                                </Text>\r\n                            </View>\r\n                            <View style={{ flex: 1, display: \"flex\", padding: \"3%\", backgroundColor: \"rgba(0,0,0,0.3)\", flexDirection: \"row\" }}>\r\n                                {Object.entries(card.cost).sort().map(([color, count]) => {\r\n                                    if (count === 0) {\r\n                                        return;\r\n                                    }\r\n                                    const backgroundColor = this.getBackgroundColor(color);\r\n\r\n                                    let forecolor = \"white\";\r\n                                    if (color === \"white\") {\r\n                                        forecolor = \"black\";\r\n                                    }\r\n\r\n                                    return <View style={{\r\n                                        flex: 1,\r\n                                        borderRadius: \"50%\",\r\n                                        backgroundColor: backgroundColor,\r\n                                    }}>\r\n                                        <Text style={{ flex: 1, textAlign: \"center\", lineHeight: \"55%\", fontSize: 30, fontWeight: \"300\", color: forecolor }}>{count}</Text>\r\n                                    </View>;\r\n                                })}\r\n                            </View>\r\n                        </View>\r\n                    </TouchableHighlight>;\r\n                })}\r\n            </View>\r\n        </SafeAreaView>\r\n    }\r\n}\r\n","// @ts-ignore\r\nimport { StyleSheet, Dimensions, useWindowDimensions } from 'react-native';\r\n\r\nexport function WIDTH(scale_pct?: number) {\r\n    if (scale_pct === null || scale_pct === undefined) { return undefined; }\r\n    return scale_pct + \"%\";\r\n    // return useWindowDimensions().width * scale_pct / 100;\r\n}\r\nexport function HEIGHT(scale_pct?: number) {\r\n    if (scale_pct === null || scale_pct === undefined) { return undefined; }\r\n    return scale_pct + \"%\";\r\n    // return useWindowDimensions().height * scale_pct / 100;\r\n}\r\nexport function MIN_WIDTH_HEIGHT(scale_pct?: number) {\r\n    return Math.min(Dimensions.get('window').width, Dimensions.get('window').height) * scale_pct / 100;\r\n    // return Math.min(useWindowDimensions().height, useWindowDimensions().width) * scale_pct / 100;\r\n}\r\n\r\nexport function RANGE(lo: number, hi: number, len: number) {\r\n    return new Array<number>(len).fill(null).map((_, i) => lo + i * (hi - lo) / (len - 1));\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mat: {\r\n        flex: 1,\r\n        backgroundColor: \"#5aa57c\",\r\n    },\r\n    mat_strips: {\r\n        backgroundColor: \"#458779\",\r\n        height: \"4%\",\r\n        position: \"absolute\",\r\n    },\r\n    mat_strip_circle: {\r\n        backgroundColor: \"#458779\",\r\n        borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\r\n        width: Dimensions.get('window').width * 0.07,\r\n        height: Dimensions.get('window').width * 0.07,\r\n        position: \"absolute\",\r\n    },\r\n    mat_card: {\r\n        position: \"absolute\",\r\n        backgroundColor: \"#4ca68a\",\r\n        borderColor: \"#448c72\",\r\n        borderWidth: 3,\r\n        borderRadius: 15,\r\n        width: \"10%\",\r\n        height: \"20%\",\r\n        paddingHorizontal: \"5%\",\r\n        paddingTop: \"5%\",\r\n        paddingBottom: \"2%\",\r\n    },\r\n    mat_discard_pile: {\r\n        position: \"relative\",\r\n        backgroundColor: \"rgba(89,90,79,0.5)\",\r\n        flex: 1,\r\n        borderRadius: 15,\r\n        textAlign: \"center\",\r\n        textAlignVertical: \"center\",\r\n    },\r\n    mat_card_glow: {\r\n        shadowColor: \"gold\",\r\n        shadowRadius: 15,\r\n        shadowOpacity: 0.6\r\n    },\r\n    mat_grey_cover: {\r\n        backgroundColor: \"#595a4f\",\r\n        right: \"2%\",\r\n        width: \"11%\",\r\n        height: \"65%\",\r\n        top: \"20%\",\r\n        position: \"absolute\",\r\n    },\r\n    mat_goods_token_track: {\r\n        position: \"absolute\",\r\n        backgroundColor: \"#5aa57c\",\r\n        borderColor: \"#448c72\",\r\n        borderWidth: 5,\r\n        right: \"10%\",\r\n        height: Dimensions.get('window').width * 0.06,\r\n        width: \"17%\",\r\n        borderRadius: Math.round(Dimensions.get('window').height) * 0.1 / 2,\r\n    },\r\n    mat_bonus_token_track: {\r\n        position: \"absolute\",\r\n        backgroundColor: \"black\",\r\n        borderColor: \"gold\",\r\n        borderWidth: 3,\r\n        right: \"3%\",\r\n        width: Dimensions.get('window').width * 0.06,\r\n        height: Dimensions.get('window').width * 0.06,\r\n        borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\r\n    },\r\n    card: {\r\n        position: \"absolute\",\r\n        width: \"10%\",\r\n        height: \"20%\",\r\n        // width: Dimensions.get('window').width * 0.1,\r\n        // height: Dimensions.get('window').width * 0.2,\r\n        borderWidth: 1,\r\n        borderRadius: 15,\r\n        shadowColor: \"black\",\r\n        shadowRadius: 3,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        shadowOpacity: 0.6,\r\n        backgroundColor: \"white\",\r\n        padding: \"6%\",\r\n        paddingTop: \"7%\",\r\n        paddingBottom: \"3%\",\r\n    },\r\n    token: {\r\n        borderWidth: 1,\r\n        borderColor: \"black\",\r\n        shadowColor: \"black\",\r\n        shadowRadius: 3,\r\n        shadowOffset: { width: 0, height: 0 },\r\n        shadowOpacity: 1,\r\n        overflow: \"hidden\",\r\n        borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\r\n        width: Dimensions.get('window').width * 0.06,\r\n        height: Dimensions.get('window').width * 0.06,\r\n        position: \"absolute\",\r\n    },\r\n    buttonPanel: {\r\n        position: \"absolute\",\r\n        left: \"17%\",\r\n        height: \"4.5%\",\r\n        width: \"54%\",\r\n        justifyContent: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        alignContent: \"center\",\r\n    },\r\n    goodsTokenTrack: {\r\n        top: 20,\r\n        bottom: 76.7,\r\n    },\r\n    bonusTokenTrack: {\r\n        top: 30,\r\n        bottom: 67,\r\n    }\r\n});\r\n\r\nexport default styles;","import React from 'react';\r\nimport { StyleProp, ViewStyle, View, Image, ImageBackground, Text, Dimensions, TouchableOpacity, GestureResponderEvent } from \"react-native\";\r\nimport styles, { HEIGHT, WIDTH, MIN_WIDTH_HEIGHT } from \"./styles\";\r\n\r\n\r\nexport const Card: React.FunctionComponent<{ top?: number, bottom?: number, left?: number, right?: number, flip?: boolean, type: string, count?: number, selected?: boolean, isSelectable?: boolean, disabled?: boolean, onPress?: (event: GestureResponderEvent) => void; }> = (props) => {\r\n    const cardTypeToImage = {\r\n        'camel': require('./camel_card.png'),\r\n        'cloth': require('./cloth_card.png'),\r\n        'cover': require('./cover_card.png'),\r\n        'diamond': require('./diamond_card.png'),\r\n        'gold': require('./gold_card.png'),\r\n        'leather': require('./leather_card.png'),\r\n        'silver': require('./silver_card.png'),\r\n        'spice': require('./spice_card.png'),\r\n    };\r\n\r\n    const RootElement: React.FunctionComponent<{ style: StyleProp<ViewStyle>; }> = (rootProps) => {\r\n        return props.isSelectable ?\r\n            <TouchableOpacity style={rootProps.style} onPress={props.onPress}>{rootProps.children}</TouchableOpacity> :\r\n            <View style={rootProps.style}>{rootProps.children}</View>;\r\n    };\r\n\r\n    return <RootElement style={[styles.card, {\r\n        top: HEIGHT(props.top),\r\n        bottom: HEIGHT(props.bottom),\r\n        left: WIDTH(props.left),\r\n        right: WIDTH(props.right),\r\n    },\r\n    props.flip && { transform: [{ rotateX: \"180deg\" }, { rotateY: \"180deg\" }] }\r\n    ]}>\r\n        <ImageBackground source={cardTypeToImage[props.type]} style={{ width: \"100%\", height: \"100%\" }}>\r\n            {props.count && <Text style={{\r\n                fontSize: 70,\r\n                textAlign: \"center\",\r\n                height: \"100%\",\r\n                color: \"white\",\r\n                fontWeight: \"800\",\r\n                textShadowRadius: 10,\r\n                textShadowColor: \"black\",\r\n                top: \"26%\",\r\n            }}>{props.count}</Text>}\r\n            <View></View>\r\n            {props.selected && <Text style={[{\r\n                textAlign: \"center\",\r\n                textAlignVertical: \"center\",\r\n            } as {\r\n                textAlign: \"center\",\r\n                textAlignVertical: \"center\";\r\n            }, {\r\n                fontSize: MIN_WIDTH_HEIGHT(2),\r\n                color: \"green\",\r\n                left: \"4%\",\r\n                backgroundColor: \"white\",\r\n                width: \"25%\",\r\n                top: \"4%\",\r\n                height: \"16%\",\r\n                lineHeight: 23.5,\r\n                borderRadius: MIN_WIDTH_HEIGHT(1.5),\r\n                overflow: \"hidden\",\r\n                fontWeight: \"800\",\r\n                borderWidth: 3,\r\n                borderColor: \"green\",\r\n                position: \"absolute\",\r\n            }]}>✓</Text>}\r\n        </ImageBackground>\r\n        {/* {!props.disabled && <View style={[styles.card, {\r\n            top: HEIGHT(props.top),\r\n            bottom: HEIGHT(props.bottom),\r\n            left: WIDTH(props.left),\r\n            right: WIDTH(props.right),\r\n            backgroundColor: \"rgba(0,0,0,0.5)\",\r\n        }]}></View>} */}\r\n    </RootElement>;\r\n};\r\n\r\n\r\nexport const Coin: React.FunctionComponent<{ top?: number, bottom?: number, left?: number, right?: number, flip?: boolean, value: number; }> = (props) => {\r\n    return <View style={[styles.token, {\r\n        top: HEIGHT(props.top),\r\n        bottom: HEIGHT(props.bottom),\r\n        left: WIDTH(props.left),\r\n        right: WIDTH(props.right),\r\n        width: Dimensions.get('window').width * 0.08,\r\n        height: Dimensions.get('window').width * 0.08,\r\n    },\r\n    props.flip && { transform: [{ rotateX: \"180deg\" }, { rotateY: \"180deg\" }] }]\r\n    }>\r\n        <ImageBackground source={require('./coin.png')} style={{ width: \"100%\", height: \"100%\" }}>\r\n            <Text style={{\r\n                color: \"white\", position: \"relative\", fontSize: 60, top: \"17%\", left: \"0%\", fontWeight: \"800\", textAlign: \"center\",\r\n                textShadowRadius: 10,\r\n                textShadowColor: \"black\",\r\n            }}>{props.value}</Text>\r\n        </ImageBackground>\r\n    </View>;\r\n};\r\n\r\nexport const Token: React.FunctionComponent<{ top?: number, bottom?: number, left?: number, right?: number, flip?: boolean, type: string, value?: number; }> = (props) => {\r\n    const tokenTypeToImage = {\r\n        'bonus_3': require('./bonus_3_token.png'),\r\n        'bonus_4': require('./bonus_4_token.png'),\r\n        'bonus_5': require('./bonus_5_token.png'),\r\n        'camel': require('./camel_token.png'),\r\n        'cloth': require('./cloth_token.png'),\r\n        'diamond': require('./diamond_token.png'),\r\n        'gold': require('./gold_token.png'),\r\n        'leather': require('./leather_token.png'),\r\n        'seal_of_excellence': require('./seal_of_excellence.png'),\r\n        'silver': require('./silver_token.png'),\r\n        'spice': require('./spice_token.png'),\r\n        'coin': require('./coin.png'),\r\n    };\r\n\r\n    return <View style={[styles.token, {\r\n        top: HEIGHT(props.top),\r\n        bottom: HEIGHT(props.bottom),\r\n        left: WIDTH(props.left),\r\n        right: WIDTH(props.right),\r\n    },\r\n    props.flip && { transform: [{ rotateX: \"180deg\" }, { rotateY: \"180deg\" }] }]}>\r\n        <ImageBackground source={tokenTypeToImage[props.type]} style={{ width: \"100%\", height: \"100%\" }}>\r\n            {props.type !== 'coin' && props.value !== undefined && props.value !== null && props.value >= 0 && [\r\n                <Text style={{ color: \"white\", position: \"relative\", top: \"3%\", left: \"44%\", fontWeight: \"800\" }}>{props.value}</Text>,\r\n                <Text style={{ color: \"white\", position: \"relative\", top: \"-27%\", left: \"-36.5%\", fontWeight: \"800\", transform: [{ rotateZ: \"-90deg\" }] }}>{props.value}</Text>,\r\n                <Text style={{ color: \"white\", position: \"relative\", top: \"33%\", left: \"-44%\", fontWeight: \"800\", transform: [{ rotateZ: \"-180deg\" }] }}>{props.value}</Text>,\r\n                <Text style={{ color: \"white\", position: \"relative\", top: \"19%\", left: \"36.4%\", fontWeight: \"800\", transform: [{ rotateZ: \"-270deg\" }] }}>{props.value}</Text>]\r\n            }\r\n            {props.type === 'coin' && props.value >= 0 && <Text style={{\r\n                color: \"white\", position: \"absolute\", fontSize: 40, top: \"19%\", left: \"35%\", fontWeight: \"800\", textAlign: \"center\",\r\n                textShadowRadius: 10,\r\n                textShadowColor: \"black\",\r\n            }}>{props.value}</Text>}\r\n        </ImageBackground>\r\n    </View >;\r\n};\r\n\r\nexport const Button: React.FunctionComponent<{ flip?: boolean, title: string, disabled?: boolean, onPress?: (event: GestureResponderEvent) => void; }> = (props) => {\r\n\r\n    const RootElement: React.FunctionComponent<{ style: StyleProp<ViewStyle>; }> = (rootProps) => {\r\n        return !props.disabled ?\r\n            <TouchableOpacity style={rootProps.style} onPress={props.onPress}>{rootProps.children}</TouchableOpacity> :\r\n            <View style={rootProps.style}>{rootProps.children}</View>;\r\n    };\r\n\r\n\r\n    return <RootElement\r\n        style={{\r\n            backgroundColor: props.disabled ? \"grey\" : \"red\",\r\n            flex: 1,\r\n            display: \"flex\",\r\n            borderRadius: 30,\r\n            margin: 5,\r\n        }}\r\n    >\r\n        <Text style={{\r\n            flex: 1,\r\n            color: \"white\",\r\n            fontWeight: \"800\",\r\n            fontSize: 20,\r\n            textAlign: \"center\",\r\n            textAlignVertical: \"center\",\r\n            borderWidth: 3,\r\n            borderRadius: 12,\r\n            padding: 2,\r\n            borderColor: 'black',\r\n        }}>\r\n            {props.title}\r\n        </Text>\r\n    </RootElement>;\r\n};\r\n\r\nexport function renderCard(type: string, isSelected = false, style: StyleProp<ViewStyle> = false) {\r\n    const cardTypeToImage = {\r\n        'camel': require('./camel_card.png'),\r\n        'cloth': require('./cloth_card.png'),\r\n        'cover': require('./cover_card.png'),\r\n        'diamond': require('./diamond_card.png'),\r\n        'gold': require('./gold_card.png'),\r\n        'leather': require('./leather_card.png'),\r\n        'silver': require('./silver_card.png'),\r\n        'spice': require('./spice_card.png'),\r\n    };\r\n\r\n    return <View style={[styles.card, style]}>\r\n        <Image source={cardTypeToImage[type]} style={{ resizeMode: \"stretch\", width: \"100%\", height: \"100%\" }} />\r\n        {isSelected && <Text style={[{\r\n            textAlign: \"center\",\r\n            textAlignVertical: \"center\",\r\n        } as {\r\n            textAlign: \"center\",\r\n            textAlignVertical: \"center\";\r\n        }, {\r\n            fontSize: MIN_WIDTH_HEIGHT(5),\r\n            color: \"green\",\r\n            left: \"4%\",\r\n            backgroundColor: \"white\",\r\n            width: \"25%\",\r\n            top: \"4%\",\r\n            height: \"16%\",\r\n            lineHeight: 23.5,\r\n            borderRadius: MIN_WIDTH_HEIGHT(4),\r\n            overflow: \"hidden\",\r\n            fontWeight: \"800\",\r\n            borderWidth: 3,\r\n            borderColor: \"green\",\r\n            position: \"absolute\",\r\n        }]}>✓</Text>}\r\n    </View >;\r\n}","import React from 'react';\r\nimport { View, Text, SafeAreaView, ScrollView, Dimensions, TouchableNativeFeedback, TouchableHighlight, TouchableOpacity } from 'react-native';\r\nimport { ScreenOrientation } from 'expo';\r\nimport BaseHand, { HandProps } from '../BaseHand';\r\nimport { renderCard } from './utils';\r\n\r\ntype State = {\r\n    hand: string[],\r\n    handIsSelected: boolean[],\r\n    displayText: string,\r\n};\r\n\r\nexport default class JaipurHand extends React.Component<HandProps, State> implements BaseHand<State> {\r\n    constructor(props: HandProps) {\r\n        super(props);\r\n\r\n        // this.state = {\r\n        //     hand: [\"diamond\", \"gold\", \"silver\", \"leather\", \"cloth\", \"diamond\"],\r\n        //     handIsSelected: [false, false, false, false, true, true, true],\r\n        //     displayText: \"Your opponent gained a token of excellence\",\r\n        // };\r\n\r\n        this.state = {\r\n            hand: [],\r\n            handIsSelected: [],\r\n            displayText: \"Waiting for a new game\",\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE);\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await ScreenOrientation.unlockAsync();\r\n    }\r\n\r\n    updateHand(hand: any) {\r\n        this.setState(hand);\r\n    }\r\n\r\n    renderHand() {\r\n        return this.state.hand.map((card, i) => <TouchableOpacity onPress={() => this.props.onAction({ type: \"select-hand-card\", index: i })}>{renderCard(card, this.state.handIsSelected[i], {\r\n            position: undefined,\r\n            flex: 1,\r\n            height: Dimensions.get('window').height * 0.2,\r\n            width: Dimensions.get('window').height * 0.4,\r\n            borderWidth: 1,\r\n            borderRadius: 15,\r\n            shadowColor: \"black\",\r\n            shadowRadius: 3,\r\n            shadowOffset: { width: 0, height: 0 },\r\n            shadowOpacity: 0.6,\r\n            backgroundColor: \"white\",\r\n            padding: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 10,\r\n            marginHorizontal: 5,\r\n        })}</TouchableOpacity>);\r\n    }\r\n\r\n    render() {\r\n        return <SafeAreaView style={{\r\n            flex: 1,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            backgroundColor: \"#5aa57c\",\r\n        }}>\r\n            <View style={{ flex: 3 }}>\r\n                <ScrollView style={{ flex: 1, display: \"flex\", flexDirection: \"row\", marginVertical: 20 }} horizontal={true}>\r\n                    {this.renderHand()}\r\n                </ScrollView>\r\n            </View>\r\n            <View style={{ flex: 1, display: \"flex\" }}>\r\n                <Text style={{ flex: 1, textAlign: \"center\", lineHeight: 80, fontSize: 35, color: \"white\", textShadowColor: \"black\", textShadowRadius: 10, }}>{this.state.displayText}</Text>\r\n            </View>\r\n        </SafeAreaView>;\r\n    }\r\n}\r\n","// export const SERVER_URI = \"http://localhost:3000\";\r\nexport const SERVER_URI = \"http://all-aboard-server.herokuapp.com\";","import React from 'react';\r\nimport { SafeAreaView } from 'react-native';\r\nimport BaseHand, { HandProps } from '../BaseHand';\r\n\r\ntype State = {\r\n};\r\n\r\nexport default class CodenamesHand extends React.Component<HandProps, State> implements BaseHand<State> {\r\n    constructor(props: HandProps) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    updateHand(hand: any) {\r\n        this.setState(hand);\r\n    }\r\n\r\n    render() {\r\n        return <SafeAreaView style={{\r\n            flex: 1,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            backgroundColor: \"#446983\",\r\n        }}>\r\n\r\n        </SafeAreaView>;\r\n    }\r\n}\r\n","import React from 'react';\n\nimport socketIOClient from \"socket.io-client\";\nimport SequenceHand from '../../components/sequence/SequenceHand';\nimport SplendorHand from '../../components/splendor/SplendorHand';\nimport JaipurHand from '../../components/jaipur/JaipurHand';\nimport { SERVER_URI } from '../../config/constants';\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RootStackParamList } from \"../../../App\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport CodenamesHand from \"../../components/codenames/CodenamesHand\";\n\ntype HandScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Hand'>;\ntype HandScreenRouteProp = RouteProp<RootStackParamList, 'Hand'>;\ntype Props = {\n    navigation: HandScreenNavigationProp;\n    route: HandScreenRouteProp;\n};\n\nexport default class Hand extends React.Component<Props> {\n    socket: SocketIOClient.Socket;\n    hand: React.RefObject<JaipurHand | SequenceHand | SplendorHand>;\n\n    constructor(props: Props) {\n        super(props);\n        this.hand = React.createRef();\n    }\n\n    async componentDidMount() {\n        this.socket = socketIOClient(SERVER_URI, {\n            query: {\n                playerName: this.props.route.params.playerName,\n                gameCode: this.props.route.params.gameCode,\n                gameName: this.props.route.params.gameName,\n                password: this.props.route.params.password,\n            },\n        });\n        this.socket.on(\"hand\", (hand: any) => {\n            if (hand === undefined || hand === null || Object.keys(hand).length === 0) {\n                return;\n            }\n            this.hand.current.updateHand(hand);\n        });\n    }\n\n    async componentWillUnmount() {\n        this.socket.close();\n    }\n\n    onAction = async (action: any) => {\n        this.socket.emit(\"action\", action);\n    };\n\n    render() {\n        const HandImpl = (() => {\n            switch (this.props.route.params.gameName) {\n                case 'codenames':\n                    return CodenamesHand;\n                case 'jaipur':\n                    return JaipurHand;\n                case 'sequence':\n                    return SequenceHand;\n                case 'splendor':\n                    return SplendorHand;\n            }\n        })();\n\n        return <HandImpl ref={this.hand} onAction={this.onAction} />;\n    }\n};\n","import React from 'react';\r\nimport { View, Text, SafeAreaView, Button } from 'react-native';\r\nimport { ScreenOrientation } from 'expo';\r\n\r\nimport { getCardChar, getCardColor } from './constants';\r\nimport BaseBoard, { BoardProps } from '../BaseBoard';\r\n\r\ntype BoardCell = {\r\n    card: string,\r\n    state: string,\r\n};\r\n\r\ntype BoardState = {\r\n    layout: BoardCell[][],\r\n    currentPlayer: number,\r\n};\r\n\r\ntype State = {\r\n    board: BoardState,\r\n};\r\n\r\nexport default class SequenceBoard extends React.Component<BoardProps, State> implements BaseBoard<State> {\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: {\r\n                layout: [],\r\n                currentPlayer: -1,\r\n            }\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.PORTRAIT_UP);\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await ScreenOrientation.unlockAsync();\r\n    }\r\n\r\n    updateBoard(board: BoardState) {\r\n        this.setState({ board });\r\n    }\r\n\r\n\r\n    updatePlayers(players: string[]) {\r\n\r\n    }\r\n\r\n    renderCard = (cell: BoardCell) => {\r\n        const { card, state } = cell;\r\n\r\n        let color = getCardColor(card);\r\n        let char = getCardChar(card);\r\n\r\n        return <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n            <Text numberOfLines={1} style={{ color, fontSize: 155, textAlignVertical: \"center\", padding: 0, margin: 0 }} adjustsFontSizeToFit={true}>\r\n                {char ?? card}\r\n            </Text>\r\n        </View >;\r\n    };\r\n\r\n    renderCardRow = (row: BoardCell[]) => {\r\n        return <View style={{ flex: 1, flexDirection: \"row\" }}>{row.map(this.renderCard)}</View>;\r\n    };\r\n\r\n    render() {\r\n        const { board } = this.state;\r\n\r\n        if (board.currentPlayer === undefined) {\r\n            return <Button title=\"Start Game\" onPress={this.props.onStart} />;\r\n        }\r\n\r\n        return <SafeAreaView style={{ flex: 1 }}>\r\n            {board.layout.map(this.renderCardRow)}\r\n        </SafeAreaView>;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { View, Text, SafeAreaView, Button, ImageBackground, TouchableHighlight } from 'react-native';\r\nimport { ScreenOrientation } from 'expo';\r\n\r\n// import { getCardChar, getCardColor } from './constants';\r\nimport BaseBoard, { BoardProps } from '../BaseBoard';\r\n\r\ntype Card = {\r\n    color: string,\r\n    prestige: number,\r\n    cost: { white: number, black: number, red: number, blue: number, green: number; };\r\n};\r\n\r\ntype Noble = {\r\n    cost: { color: string, count: number; }[],\r\n    prestige: number,\r\n};\r\n\r\ntype BoardState = {\r\n    faceupCards: Card[][],\r\n    coins: { white: number, black: number, red: number, blue: number, green: number, gold: number; },\r\n    nobles: Noble[],\r\n    currentPlayerIndex: number,\r\n};\r\n\r\ntype State = BoardState;\r\n\r\nexport default class SplendorBoard extends React.Component<BoardProps, State> implements BaseBoard<State> {\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n\r\n        let faceupCards = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            faceupCards.push(new Array(4).fill({ color: \"blue\", prestige: 3, cost: { white: 0, green: 3, red: 3, black: 5, blue: 0 } }));\r\n        }\r\n\r\n        faceupCards[0][0] = { color: \"red\", prestige: 3, cost: { green: 3, red: 3, black: 5, white: 0, blue: 0 } };\r\n\r\n        this.state = {\r\n            faceupCards,\r\n            coins: { white: 0, black: 0, red: 0, blue: 0, green: 0, gold: 0 },\r\n            nobles: [{ cost: [{ color: \"green\", count: 4 }, { color: \"green\", count: 4 }, { color: \"green\", count: 4 }], prestige: 3 }, null, null, null, null],\r\n            currentPlayerIndex: -1,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.PORTRAIT_UP);\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await ScreenOrientation.unlockAsync();\r\n    }\r\n\r\n    updateBoard(board: BoardState) {\r\n        this.setState(board);\r\n    }\r\n\r\n    updatePlayers(players: string[]) {\r\n\r\n    }\r\n\r\n    onCardPress = (rowIndex: number, colIndex: number) => {\r\n        this.props.onAction({\r\n            type: \"card\",\r\n            rowIndex,\r\n            colIndex\r\n        });\r\n    };\r\n\r\n    onCoinPress = (color: string) => {\r\n        this.props.onAction({\r\n            type: \"coin\",\r\n            color\r\n        });\r\n    };\r\n\r\n    onNoblePress = (nobleIndex: number) => {\r\n        this.props.onAction({\r\n            type: \"noble\",\r\n            nobleIndex\r\n        });\r\n    };\r\n\r\n    renderCard(cell: Card, rowIndex: number, colIndex: number) {\r\n        if (cell === null) {\r\n            return <View></View>;\r\n        }\r\n        const renderCoinCost = (color, count) => {\r\n            if (count === 0) {\r\n                return;\r\n            }\r\n            let forecolor = \"white\";\r\n            if (color === \"white\") {\r\n                forecolor = \"black\";\r\n            }\r\n            return <View style={{\r\n                flex: 1,\r\n                paddingRight: \"75%\"\r\n            }}>\r\n                <View style={{\r\n                    borderRadius: \"50%\",\r\n                    height: \"100%\",\r\n                    width: \"100%\",\r\n                    backgroundColor: this.getBackgroundColorCardCoin(color),\r\n                    flex: 1,\r\n                }}><Text style={{ textAlign: \"center\", fontSize: 27, fontWeight: \"800\", color: forecolor }}>{count}</Text></View>\r\n            </View>;\r\n        };\r\n\r\n        let backgroundColor = cell.color;\r\n        if (backgroundColor === \"black\") {\r\n            backgroundColor = \"rgb(50,50,50)\";\r\n        }\r\n\r\n        return <TouchableHighlight\r\n            style={{\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                backgroundColor: backgroundColor,\r\n                borderRadius: 10,\r\n                borderWidth: 1,\r\n                borderColor: '#fff',\r\n            }}\r\n            onPress={() => this.onCardPress(rowIndex, colIndex)}\r\n            underlayColor='#fff'>\r\n            <View style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                flex: 1,\r\n            }}>\r\n                <View style={{ flex: 1, backgroundColor: \"rgba(255, 255, 255, 0.7)\" }}>\r\n                    <Text style={{ flex: 1, lineHeight: \"60%\", fontSize: 50, paddingLeft: \"6%\", color: \"white\", fontWeight: \"800\", textShadowRadius: 5, textShadowColor: \"black\" }}>{cell.prestige}</Text>\r\n                </View>\r\n                <View style={{ flex: 3, display: \"flex\", padding: \"3%\", backgroundColor: \"rgba(0,0,0,0.3)\" }}>\r\n                    <View style={{ flex: 0.2 }}></View>\r\n                    {Object.entries(cell.cost).filter(val => val[1] === 0).map(_ => <View style={{\r\n                        flex: 1,\r\n                        paddingRight: \"75%\"\r\n                    }} />)}\r\n\r\n                    {renderCoinCost(\"white\", cell.cost.white)}\r\n                    {renderCoinCost(\"blue\", cell.cost.blue)}\r\n                    {renderCoinCost(\"green\", cell.cost.green)}\r\n                    {renderCoinCost(\"red\", cell.cost.red)}\r\n                    {renderCoinCost(\"black\", cell.cost.black)}\r\n                </View>\r\n            </View>\r\n        </TouchableHighlight>;\r\n    }\r\n\r\n    getBackgroundColorCardCoin(color: string) {\r\n        switch (color) {\r\n            case 'white':\r\n                return 'rgb(255,255,255)';\r\n            case 'black':\r\n                return 'rgb(20,20,20)';\r\n            case 'red':\r\n                return 'rgb(255,0,0)';\r\n            case 'blue':\r\n                return 'rgb(0,0,255)';\r\n            case 'green':\r\n                return 'rgb(0,128,0)';\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getBackgroundColor(color: string) {\r\n        switch (color) {\r\n            case 'white':\r\n                return 'rgba(255,255,255,0.8)';\r\n            case 'black':\r\n                return 'rgba(20,20,20,1)';\r\n            case 'red':\r\n                return 'rgba(255,0,0,0.5)';\r\n            case 'blue':\r\n                return 'rgba(0,0,255,0.5)';\r\n            case 'green':\r\n                return 'rgba(0,128,0,0.5)';\r\n            case 'gold':\r\n                return 'rgba(255,215,0,0.5)';\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    renderCoin(color: string, count: number) {\r\n        const backgroundColor = this.getBackgroundColor(color);\r\n\r\n        let forecolor = \"white\";\r\n        if (color === \"white\") {\r\n            forecolor = \"black\";\r\n        }\r\n\r\n        return <TouchableHighlight\r\n            style={{\r\n                borderRadius: \"50%\",\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                backgroundColor: backgroundColor,\r\n            }}\r\n            onPress={() => this.onCoinPress(color)}\r\n            underlayColor='#fff'>\r\n            <Text style={{ flex: 1, textAlign: \"center\", lineHeight: \"118%\", fontSize: 80, fontWeight: \"800\", color: forecolor, textShadowRadius: 5, textShadowColor: \"black\" }}>{count}</Text>\r\n        </TouchableHighlight>;\r\n    }\r\n\r\n    renderNoble(noble: Noble, nobleIndex: number) {\r\n        if (noble === null) {\r\n            return <View style={{ flex: 1 }}></View>;\r\n        }\r\n        const { cost, prestige } = noble;\r\n        while (cost.length < 3) {\r\n            cost.unshift(null);\r\n        }\r\n        const renderCardCost = (cost) => {\r\n            if (cost === null) {\r\n                return <View style={{ flex: 1 }}></View>;\r\n            }\r\n            const { color, count } = cost;\r\n\r\n            let forecolor = \"white\";\r\n            if (color === \"white\") {\r\n                forecolor = \"black\";\r\n            }\r\n            return <View style={{\r\n                flex: 1,\r\n                paddingRight: \"2%\",\r\n                paddingBottom: \"4%\",\r\n            }}>\r\n                <View style={{\r\n                    height: \"100%\",\r\n                    width: \"100%\",\r\n                    backgroundColor: this.getBackgroundColor(color),\r\n                    flex: 1,\r\n                    borderWidth: 1,\r\n                }}><Text style={{ textAlign: \"center\", fontSize: 27, fontWeight: \"800\", color: forecolor }}>{count}</Text></View>\r\n            </View>;\r\n        };\r\n\r\n        return <TouchableHighlight\r\n            style={{\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n            }}\r\n            onPress={() => this.onNoblePress(nobleIndex)}\r\n            underlayColor='#fff'>\r\n            <View style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                flex: 1,\r\n            }}>\r\n                <View style={{ flex: 1, display: \"flex\", padding: \"3%\", backgroundColor: \"rgba(255, 255, 255, 0.7)\" }}>\r\n                    <Text style={{ flex: 1, textAlign: \"center\", fontSize: 30, paddingLeft: \"6%\", color: \"white\", fontWeight: \"800\", textShadowRadius: 5, textShadowColor: \"black\" }}>{prestige}</Text>\r\n                    {cost.map(cost => {\r\n                        return renderCardCost(cost);\r\n                    })}\r\n                </View>\r\n                <View style={{ flex: 3, backgroundColor: \"rgba(128, 128, 128, 0.5)\" }}></View>\r\n            </View>\r\n        </TouchableHighlight>;\r\n    }\r\n\r\n    render() {\r\n        const { faceupCards, coins, nobles, currentPlayerIndex } = this.state;\r\n\r\n        // if (currentPlayerIndex === -1) {\r\n        //     return <Button title=\"Start Game\" onPress={this.props.onStart} />;\r\n        // }\r\n\r\n        const styles = {\r\n            card: {\r\n                flex: 1,\r\n                paddingTop: \"6.5%\",\r\n                paddingBottom: \"1.5%\",\r\n                paddingLeft: \"6%\",\r\n                paddingRight: \"6%\",\r\n            },\r\n            cardCell: {\r\n                flex: 1,\r\n                display: \"flex\",\r\n            },\r\n            cardRow: {\r\n                flex: 1,\r\n                flexDirection: 'row',\r\n                display: 'flex',\r\n            },\r\n            coinCell: {\r\n                flex: 1,\r\n                display: \"flex\",\r\n                paddingLeft: \"3%\",\r\n                paddingRight: \"2.8%\",\r\n            },\r\n            nobleCell: {\r\n                flex: 1,\r\n                display: \"flex\",\r\n                paddingTop: \"4.5%\",\r\n                paddingBottom: \"13%\",\r\n                paddingRight: \"11.05%\"\r\n            }\r\n        };\r\n\r\n        const renderCoinCell = (color: string, count: number) => {\r\n            return <View style={styles.coinCell}>\r\n                {this.renderCoin(color, count)}\r\n            </View>;\r\n        };\r\n\r\n        return <ImageBackground source={require(\"./board.jpg\")} resizeMode=\"stretch\" style={{ flex: 1 }}>\r\n            <View style={{\r\n                flex: 4.5, flexDirection: 'row',\r\n                display: \"flex\"\r\n            }}>\r\n                <View style={{ flex: 4 }}>\r\n\r\n                </View>\r\n                <View style={{ flex: 11, display: \"flex\", flexDirection: 'column', paddingTop: \"2%\", paddingLeft: \"4.1%\", paddingRight: \"1.1%\", paddingBottom: \"1.4%\" }}>\r\n                    {faceupCards.map((row, rowIndex) => {\r\n                        return <View style={styles.cardRow}>\r\n                            {row.map((cell, colIndex) => {\r\n                                return <View style={styles.cardCell}>\r\n                                    <View style={styles.card}>{this.renderCard(cell, rowIndex, colIndex)}</View>\r\n                                </View>;\r\n                            })}\r\n                        </View>;\r\n                    })}\r\n                </View>\r\n                <View style={{ flex: 7 }}>\r\n                    <View style={{ flex: 1, flexDirection: \"column\", display: \"flex\", paddingTop: 208, paddingBottom: 5, paddingRight: \"10%\", paddingLeft: \"8%\" }}>\r\n                        <View style={{ flex: 1, display: \"flex\", paddingLeft: \"25%\", paddingRight: \"31%\" }}>\r\n                            <View style={styles.nobleCell}>{this.renderNoble(nobles[0], 0)}</View>\r\n                        </View>\r\n                        <View style={{ flex: 0.05 }}></View>\r\n                        <View style={{ flex: 1, flexDirection: \"row\", display: \"flex\" }}>\r\n                            <View style={styles.nobleCell}>{this.renderNoble(nobles[1], 1)}</View>\r\n                            <View style={styles.nobleCell}>{this.renderNoble(nobles[2], 2)}</View>\r\n                        </View>\r\n                        <View style={{ flex: 1, flexDirection: \"row\", display: \"flex\" }}>\r\n                            <View style={styles.nobleCell}>{this.renderNoble(nobles[3], 3)}</View>\r\n                            <View style={styles.nobleCell}>{this.renderNoble(nobles[4], 4)}</View>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n            <View style={{ flex: 1, flexDirection: \"row\" }}>\r\n                <View style={{ flex: 1, flexDirection: \"row\", paddingBottom: \"31.5%\", paddingTop: \"1.2%\" }}>\r\n                    <View style={{ flex: 2.5, flexDirection: \"row\" }}>\r\n                        <View style={{ flex: 1, display: \"flex\", flexDirection: \"row\", paddingRight: \"2.27%\", paddingLeft: \"27.5%\" }}>\r\n                            {renderCoinCell(\"white\", coins.white)}\r\n                            {renderCoinCell(\"black\", coins.black)}\r\n                            {renderCoinCell(\"red\", coins.red)}\r\n                            {renderCoinCell(\"blue\", coins.blue)}\r\n                            {renderCoinCell(\"green\", coins.green)}\r\n                        </View>\r\n                    </View>\r\n                    <View style={{ flex: 1, flexDirection: \"row\" }}>\r\n                        <View style={{ flex: 1, paddingRight: \"67%\", paddingLeft: \"7%\" }}>\r\n                            {renderCoinCell(\"gold\", coins.gold)}\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </ImageBackground >;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport { View, StyleProp, ViewStyle, ImageStyle, Image, Text } from \"react-native\";\r\nimport styles, { WIDTH, HEIGHT, RANGE } from \"./styles\";\r\n\r\nconst BoardMapStrip: React.FunctionComponent<{ width: number, top?: number, bottom?: number }> = (props) => {\r\n    return <View style={\r\n        [styles.mat_strips, {\r\n            width: WIDTH(props.width),\r\n            top: HEIGHT(props.top),\r\n            bottom: HEIGHT(props.bottom),\r\n        }]}>{props.children}</View>;\r\n}\r\n\r\nconst BoardMapStripCircle: React.FunctionComponent<{ top?: number, bottom?: number, left?: number }> = (props) => {\r\n    return <View style={\r\n        [styles.mat_strip_circle, {\r\n            top: HEIGHT(props.top),\r\n            bottom: HEIGHT(props.bottom),\r\n            left: WIDTH(props.left),\r\n        }]}>{props.children}</View>;\r\n}\r\n\r\nconst BoardMatCard: React.FunctionComponent<{ top?: number, bottom?: number, left?: number, glow?: boolean }> = (props = { glow: false }) => {\r\n    return <View style={[styles.mat_card, {\r\n        top: HEIGHT(props.top),\r\n        bottom: HEIGHT(props.bottom),\r\n        left: WIDTH(props.left),\r\n    },\r\n    props.glow && styles.mat_card_glow,\r\n    ]}>{props.children}</View>;\r\n}\r\n\r\nconst BoardCamel: React.FunctionComponent<{ top?: number, bottom?: number, left?: number, flip?: boolean }> = (props = { flip: false }) => {\r\n    return <Image source={require('./camel-char.png')}\r\n        style={\r\n            [{\r\n                position: \"absolute\",\r\n                height: \"5%\",\r\n                width: \"5%\",\r\n                opacity: 0.2,\r\n                resizeMode: \"stretch\",\r\n                top: HEIGHT(props.top),\r\n                bottom: HEIGHT(props.bottom),\r\n                left: WIDTH(props.left),\r\n            },\r\n            props.flip && { transform: [{ rotateX: \"180deg\" }, { rotateY: \"180deg\" }] }]\r\n        } />;\r\n}\r\n\r\nconst BoardGoodsTokenTrack: React.FunctionComponent<{ top: number }> = (props) => {\r\n    return <View style={[styles.mat_goods_token_track, { top: HEIGHT(props.top) }]} />;\r\n}\r\n\r\nconst BoardBonusTokenTrack: React.FunctionComponent<{ top: number }> = (props) => {\r\n    return <View style={[styles.mat_bonus_token_track, { top: HEIGHT(props.top) }]} />;\r\n}\r\n\r\nexport default function renderBoardMat() {\r\n    const renderMatStrips = () => {\r\n        return [\r\n            <BoardMapStrip width={100} top={7} />,\r\n            <BoardMapStrip width={100} bottom={7} />,\r\n            <BoardMapStrip width={65} top={20} />,\r\n            <BoardMapStrip width={65} bottom={20} />,\r\n\r\n            RANGE(39, 55, 3).map(left => [\r\n                <BoardMapStripCircle top={4} left={left} />,\r\n                <BoardMapStripCircle bottom={4} left={left} />\r\n            ]),\r\n        ];\r\n    }\r\n\r\n    const renderGreyMat = () => {\r\n        return <View style={styles.mat_grey_cover}></View>;\r\n    };\r\n\r\n    const goodsTokenTrackTop = styles.goodsTokenTrack.top;\r\n    const goodsTokenTrackBottom = styles.goodsTokenTrack.bottom;\r\n    const bonusTokenTrackTop = styles.bonusTokenTrack.top;\r\n    const bonusTokenTrackBottom = styles.bonusTokenTrack.bottom;\r\n\r\n    return [\r\n        renderMatStrips(),\r\n\r\n        <BoardCamel left={40} top={6.5} flip />,\r\n        RANGE(1, 11.5, 3).map(left => <BoardCamel left={left} top={13} flip />),\r\n        RANGE(27.5, 32.75, 2).map(left => <BoardCamel left={left} top={13} flip />),\r\n\r\n        <BoardCamel left={40} bottom={6.5} />,\r\n        RANGE(1, 11.5, 3).map(left => <BoardCamel left={left} bottom={13} />),\r\n        RANGE(27.5, 32.75, 2).map(left => <BoardCamel left={left} bottom={13} />),\r\n\r\n        <BoardMatCard left={5} top={30}>\r\n            <View style={[styles.mat_discard_pile]}>\r\n                <Text style={\r\n                    {\r\n                        transform: [{ rotateZ: \"-90deg\" }],\r\n                        top: \"38%\",\r\n                        fontSize: 35,\r\n                        color: \"rgba(255, 215, 0, 0.2)\",\r\n                        shadowOpacity: 1,\r\n                        shadowColor: \"white\",\r\n                        shadowOffset: { width: 0, height: 0 }\r\n                    }\r\n                }>Discard</Text>\r\n            </View>\r\n        </BoardMatCard>,\r\n        <BoardMatCard left={5} bottom={30} />,\r\n        <BoardMatCard left={17} top={5} />,\r\n        <BoardMatCard left={17} bottom={5} />,\r\n\r\n        RANGE(17, 61, 5).map(left => <BoardMatCard left={left} top={42} glow />),\r\n\r\n        renderGreyMat(),\r\n        RANGE(goodsTokenTrackTop, goodsTokenTrackBottom, 6).map(top => <BoardGoodsTokenTrack top={top} />),\r\n        RANGE(bonusTokenTrackTop, bonusTokenTrackBottom, 4).map(top => <BoardBonusTokenTrack top={top} />),\r\n    ];\r\n}\r\n","import React, { Component } from 'react';\r\nimport { View, Text, SafeAreaView, Image, StyleProp, ViewStyle, ImageStyle, ImageBackground, Dimensions, TouchableOpacity, GestureResponderEvent } from 'react-native';\r\nimport { ScreenOrientation } from 'expo';\r\n\r\nimport BaseBoard, { BoardProps } from '../BaseBoard';\r\nimport styles, { HEIGHT, WIDTH } from './styles';\r\nimport { fontSize } from '../../styles/theme';\r\nimport { Card, Coin, Token, Button } from './utils';\r\nimport renderBoardMat from './renderBoardMat';\r\n\r\ntype PlayerState = {\r\n    sealsOfExcellence: number,\r\n    camels: number,\r\n    hasCamelToken: boolean,\r\n    rupees: number,\r\n    goodsTokens: {\r\n        diamond: number[],\r\n        gold: number[],\r\n        silver: number[],\r\n        cloth: number[],\r\n        spice: number[],\r\n        leather: number[],\r\n    },\r\n    bonusTokens: {\r\n        bonus_3: number[],\r\n        bonus_4: number[],\r\n        bonus_5: number[],\r\n    },\r\n};\r\ntype State = {\r\n    playerStates: [PlayerState, PlayerState],\r\n    market: [string, string, string, string, string],\r\n    marketIsSelected: [boolean, boolean, boolean, boolean, boolean],\r\n    marketIsSelectable: [boolean, boolean, boolean, boolean, boolean],\r\n    topDiscard: string,\r\n    drawPileHasCards: boolean,\r\n    goodsTokens: {\r\n        diamond: number[],\r\n        gold: number[],\r\n        silver: number[],\r\n        cloth: number[],\r\n        spice: number[],\r\n        leather: number[],\r\n    },\r\n    bonusTokens: {\r\n        bonus_3: number,\r\n        bonus_4: number,\r\n        bonus_5: number,\r\n    },\r\n    camelToken: boolean,\r\n    currentPlayerIndex: number,\r\n    buttons: [string, string, boolean][],\r\n\r\n    players: string[],\r\n};\r\n\r\nexport default class JaipurBoard extends React.Component<BoardProps, State> implements BaseBoard<State> {\r\n    goodsTokenTrackTop: number;\r\n    goodsTokenTrackBottom: number;\r\n    bonusTokenTrackTop: number;\r\n    bonusTokenTrackBottom: number;\r\n\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n\r\n        this.goodsTokenTrackTop = 20;\r\n        this.goodsTokenTrackBottom = 76.7;\r\n        this.bonusTokenTrackTop = 30;\r\n        this.bonusTokenTrackBottom = 67;\r\n\r\n        // this.state = {\r\n        //     playerStates: [\r\n        //         {\r\n        //             sealsOfExcellence: 2,\r\n        //             camels: 4,\r\n        //             hasCamelToken: true,\r\n        //             rupees: 0,\r\n        //             goodsTokens: {\r\n        //                 diamond: [7],\r\n        //                 gold: [6],\r\n        //                 silver: [5],\r\n        //                 cloth: [1, 2, 2, 3, 3, 5],\r\n        //                 spice: [1, 2, 2, 3, 3, 5],\r\n        //                 leather: [1, 1, 1, 1, 1, 2, 3, 4],\r\n        //             },\r\n        //             bonusTokens: {\r\n        //                 bonus_3: [4, 5, 6],\r\n        //                 bonus_4: [],\r\n        //                 bonus_5: [],\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             sealsOfExcellence: 2,\r\n        //             camels: 5,\r\n        //             hasCamelToken: true,\r\n        //             rupees: 0,\r\n        //             goodsTokens: {\r\n        //                 diamond: [7],\r\n        //                 gold: [6],\r\n        //                 silver: [5],\r\n        //                 cloth: [1, 2, 2, 3, 3, 5],\r\n        //                 spice: [1, 2, 2, 3, 3, 5],\r\n        //                 leather: [1, 1, 1, 1, 1, 2, 3, 4],\r\n        //             },\r\n        //             bonusTokens: {\r\n        //                 bonus_3: [4, 5, 6],\r\n        //                 bonus_4: [],\r\n        //                 bonus_5: [],\r\n        //             }\r\n        //         }\r\n        //     ],\r\n        //     market: [\"diamond\", \"silver\", \"cloth\", \"leather\", \"spice\"],\r\n        //     marketIsSelected: [true, true, false, false, false],\r\n        //     marketIsSelectable: [true, true, true, true, true],\r\n        //     topDiscard: \"gold\",\r\n        //     drawPileHasCards: true,\r\n        //     goodsTokens: {\r\n        //         diamond: [5, 5, 5, 7, 7],\r\n        //         gold: [5, 5, 5, 6, 6],\r\n        //         silver: [5, 5, 5, 5, 5],\r\n        //         cloth: [1, 1, 2, 2, 3, 3, 5],\r\n        //         spice: [1, 1, 2, 2, 3, 3, 5],\r\n        //         leather: [1, 1, 1, 1, 1, 1, 2, 3, 4],\r\n        //     },\r\n        //     bonusTokens: {\r\n        //         bonus_3: 6,\r\n        //         bonus_4: 6,\r\n        //         bonus_5: 6,\r\n        //     },\r\n        //     camelToken: true,\r\n        //     currentPlayerIndex: -1,\r\n        //     buttons: [[\"start\", \"Start Game\"]],\r\n        // };\r\n\r\n        this.state = {\r\n            playerStates: [\r\n                {\r\n                    sealsOfExcellence: 0,\r\n                    camels: 0,\r\n                    hasCamelToken: false,\r\n                    rupees: 0,\r\n                    goodsTokens: {\r\n                        diamond: [],\r\n                        gold: [],\r\n                        silver: [],\r\n                        cloth: [],\r\n                        spice: [],\r\n                        leather: [],\r\n                    },\r\n                    bonusTokens: {\r\n                        bonus_3: [],\r\n                        bonus_4: [],\r\n                        bonus_5: [],\r\n                    }\r\n                },\r\n                {\r\n                    sealsOfExcellence: 0,\r\n                    camels: 0,\r\n                    hasCamelToken: false,\r\n                    rupees: 0,\r\n                    goodsTokens: {\r\n                        diamond: [],\r\n                        gold: [],\r\n                        silver: [],\r\n                        cloth: [],\r\n                        spice: [],\r\n                        leather: [],\r\n                    },\r\n                    bonusTokens: {\r\n                        bonus_3: [],\r\n                        bonus_4: [],\r\n                        bonus_5: [],\r\n                    }\r\n                },\r\n            ],\r\n            market: [null, null, null, null, null],\r\n            marketIsSelected: [false, false, false, false, false],\r\n            marketIsSelectable: [false, false, false, false, false],\r\n            topDiscard: null,\r\n            drawPileHasCards: false,\r\n            goodsTokens: {\r\n                diamond: [],\r\n                gold: [],\r\n                silver: [],\r\n                cloth: [],\r\n                spice: [],\r\n                leather: [],\r\n            },\r\n            bonusTokens: {\r\n                bonus_3: 0,\r\n                bonus_4: 0,\r\n                bonus_5: 0,\r\n            },\r\n            camelToken: false,\r\n            currentPlayerIndex: -1,\r\n            buttons: [[\"start\", \"Start Game\", false]],\r\n\r\n            players: [],\r\n        };\r\n    }\r\n\r\n    updateBoard(state: State) {\r\n        this.setState(state);\r\n    }\r\n\r\n    updatePlayers(players: string[]) {\r\n        this.setState({ players });\r\n    }\r\n\r\n    render() {\r\n        const goodsTokenTrackTop = this.goodsTokenTrackTop;\r\n        const goodsTokenTrackBottom = this.goodsTokenTrackBottom;\r\n        const bonusTokenTrackTop = this.bonusTokenTrackTop;\r\n        const bonusTokenTrackBottom = this.bonusTokenTrackBottom;\r\n\r\n        const goodsTokenTrackOffsets = 1.38;\r\n\r\n        return <SafeAreaView style={styles.mat}>\r\n            {renderBoardMat()}\r\n\r\n            <View style={{ position: \"absolute\", top: \"50%\", transform: [{ rotateZ: \"-90deg\" }], left: \"-7.5%\", flexDirection: \"row\", width: \"20%\" }}>\r\n                <Button title=\"Back\" onPress={() => {\r\n                    this.props.onBack();\r\n                }} />\r\n                <Button title=\"Reset\" onPress={() => {\r\n                    this.props.onAction({ \"type\": \"reset\" });\r\n                }} />\r\n            </View>\r\n\r\n            {this.state.playerStates[0].sealsOfExcellence >= 1 && <Token type='seal_of_excellence' top={4.7} left={47.5} flip />}\r\n            {this.state.playerStates[0].sealsOfExcellence >= 2 && <Token type='seal_of_excellence' top={4.7} left={55.5} flip />}\r\n            {this.state.playerStates[1].sealsOfExcellence >= 1 && <Token type='seal_of_excellence' bottom={4.7} left={47.5} />}\r\n            {this.state.playerStates[1].sealsOfExcellence >= 2 && <Token type='seal_of_excellence' bottom={4.7} left={55.5} />}\r\n\r\n            {this.state.playerStates[0].hasCamelToken && <Token type='camel' top={4.7} left={39.5} flip />}\r\n            {this.state.playerStates[1].hasCamelToken && <Token type='camel' bottom={4.7} left={39.5} />}\r\n\r\n            {([\r\n                ['diamond', this.state.goodsTokens.diamond],\r\n                ['gold', this.state.goodsTokens.gold],\r\n                ['silver', this.state.goodsTokens.silver],\r\n                ['cloth', this.state.goodsTokens.cloth],\r\n                ['spice', this.state.goodsTokens.spice],\r\n                ['leather', this.state.goodsTokens.leather],\r\n            ] as [string, number[]][]).map(([type, tokens], i) =>\r\n                tokens.map((value, j) =>\r\n                    <Token type={type} value={value} top={goodsTokenTrackTop + i * (goodsTokenTrackBottom - goodsTokenTrackTop) / 5} left={84 - j * goodsTokenTrackOffsets} />))}\r\n\r\n            {this.state.drawPileHasCards && <Card type='cover' bottom={30} left={5} />}\r\n\r\n            {this.state.topDiscard !== null && <Card type={this.state.topDiscard} top={30} left={5} />}\r\n\r\n            {this.state.playerStates[0].camels > 0 && <Card type='camel' count={this.state.playerStates[0].camels} left={17} top={5} flip />}\r\n            {this.state.playerStates[1].camels > 0 && <Card type='camel' count={this.state.playerStates[1].camels} left={17} bottom={5} />}\r\n\r\n            {this.state.market.map((card, i) => card && <Card left={17 + 11 * i} top={42} type={card} selected={this.state.marketIsSelected[i]} isSelectable={this.state.marketIsSelectable[i]} onPress={() => this.props.onAction({ type: \"select-card\", index: i })} />)}\r\n\r\n            {new Array(this.state.bonusTokens.bonus_3).fill(null).map((_, i) => <Token type={\"bonus_3\"} top={bonusTokenTrackTop + 0.6 * i} right={3} />)}\r\n            {new Array(this.state.bonusTokens.bonus_4).fill(null).map((_, i) => <Token type={\"bonus_4\"} top={bonusTokenTrackTop + (bonusTokenTrackBottom - bonusTokenTrackTop) / 3 + 0.6 * i} right={3} />)}\r\n            {new Array(this.state.bonusTokens.bonus_5).fill(null).map((_, i) => <Token type={\"bonus_5\"} top={bonusTokenTrackTop + 2 * (bonusTokenTrackBottom - bonusTokenTrackTop) / 3 + 0.6 * i} right={3} />)}\r\n            {this.state.camelToken && <Token type={\"camel\"} top={bonusTokenTrackTop + 3 * (bonusTokenTrackBottom - bonusTokenTrackTop) / 3} right={3} />}\r\n\r\n            <Coin top={3.5} right={2} value={this.state.playerStates[0].rupees} flip />\r\n            <Coin bottom={3.5} right={2} value={this.state.playerStates[1].rupees} />\r\n\r\n            {[0, 1].map(playerIndex => {\r\n                return [...this.state.playerStates[playerIndex].goodsTokens.diamond.map(value => { return { type: \"diamond\", value }; }),\r\n                ...this.state.playerStates[playerIndex].goodsTokens.gold.map(value => { return { type: \"gold\", value }; }),\r\n                ...this.state.playerStates[playerIndex].goodsTokens.silver.map(value => { return { type: \"silver\", value }; }),\r\n                ...this.state.playerStates[playerIndex].goodsTokens.cloth.map(value => { return { type: \"cloth\", value }; }),\r\n                ...this.state.playerStates[playerIndex].goodsTokens.spice.map(value => { return { type: \"spice\", value }; }),\r\n                ...this.state.playerStates[playerIndex].goodsTokens.leather.map(value => { return { type: \"leather\", value }; }),\r\n                ...this.state.playerStates[playerIndex].bonusTokens.bonus_3.map(value => { return { type: \"coin\", value }; }),\r\n                ...this.state.playerStates[playerIndex].bonusTokens.bonus_4.map(value => { return { type: \"coin\", value }; }),\r\n                ...this.state.playerStates[playerIndex].bonusTokens.bonus_5.map(value => { return { type: \"coin\", value }; }),\r\n                ].map(({ type, value }, i) => {\r\n                    if (playerIndex === 0)\r\n                        return <Token type={type} value={value} top={4.7} left={83 - i * 0.8} flip />;\r\n                    else\r\n                        return <Token type={type} value={value} bottom={4.7} left={83 - i * 0.8} />;\r\n                });\r\n            })}\r\n\r\n            {\r\n                [0, 1].map(i => {\r\n                    const getButton = () => {\r\n                        if (this.state.currentPlayerIndex !== -1 && this.state.currentPlayerIndex !== i) {\r\n                            return;\r\n                        }\r\n                        return this.state.buttons.map(([action, title, disabled]) => {\r\n                            if (action === \"start\" && this.state.players.length !== 2)\r\n                                disabled = true;\r\n                            if (action === \"start\" && this.state.players.length > i) {\r\n                                title = title + \" (\" + this.state.players[i] + \")\";\r\n                            }\r\n                            return <Button title={title} disabled={disabled} onPress={() => {\r\n                                if (action === \"start\") {\r\n                                    this.props.onStart();\r\n                                } else {\r\n                                    this.props.onAction({ \"type\": action });\r\n                                }\r\n                            }} />;\r\n                        });\r\n                    };\r\n\r\n                    return <View style={[styles.buttonPanel, i == 0 ? { bottom: \"68%\", transform: [{ rotateX: \"180deg\" }, { rotateY: \"180deg\" }] } : { top: \"68%\" }]}>\r\n                        {getButton()}\r\n                    </View>;\r\n                })\r\n            }\r\n        </SafeAreaView>;\r\n    }\r\n};\r\n","// @ts-ignore\r\nimport { StyleSheet, Dimensions, useWindowDimensions } from 'react-native';\r\n\r\nexport function WIDTH(scale_pct?: number) {\r\n    if (scale_pct === null || scale_pct === undefined) { return undefined; }\r\n    // return scale_pct + \"%\";\r\n    return useWindowDimensions().width * scale_pct / 100;\r\n}\r\n\r\nexport function HEIGHT(scale_pct?: number) {\r\n    if (scale_pct === null || scale_pct === undefined) { return undefined; }\r\n    // return scale_pct + \"%\";\r\n    return useWindowDimensions().height * scale_pct / 100;\r\n}\r\n\r\nexport function MIN_WIDTH_HEIGHT(scale_pct?: number) {\r\n    // return Math.min(Dimensions.get('window').width, Dimensions.get('window').height) * scale_pct / 100;\r\n    return Math.min(useWindowDimensions().height, useWindowDimensions().width) * scale_pct / 100;\r\n}\r\n\r\nexport function RANGE(lo: number, hi: number, len: number) {\r\n    return new Array<number>(len).fill(null).map((_, i) => lo + i * (hi - lo) / (len - 1));\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mat: {\r\n        flex: 1,\r\n        backgroundColor: \"#446983\",\r\n    },\r\n    // mat_strips: {\r\n    //     backgroundColor: \"#458779\",\r\n    //     height: \"4%\",\r\n    //     position: \"absolute\",\r\n    // },\r\n    // mat_strip_circle: {\r\n    //     backgroundColor: \"#458779\",\r\n    //     borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\r\n    //     width: Dimensions.get('window').width * 0.07,\r\n    //     height: Dimensions.get('window').width * 0.07,\r\n    //     position: \"absolute\",\r\n    // },\r\n    // mat_card: {\r\n    //     position: \"absolute\",\r\n    //     backgroundColor: \"#4ca68a\",\r\n    //     borderColor: \"#448c72\",\r\n    //     borderWidth: 3,\r\n    //     borderRadius: 15,\r\n    //     width: \"10%\",\r\n    //     height: \"20%\",\r\n    //     paddingHorizontal: \"5%\",\r\n    //     paddingTop: \"5%\",\r\n    //     paddingBottom: \"2%\",\r\n    // },\r\n    // mat_discard_pile: {\r\n    //     position: \"relative\",\r\n    //     backgroundColor: \"rgba(89,90,79,0.5)\",\r\n    //     flex: 1,\r\n    //     borderRadius: 15,\r\n    //     textAlign: \"center\",\r\n    //     textAlignVertical: \"center\",\r\n    // },\r\n    // mat_card_glow: {\r\n    //     shadowColor: \"gold\",\r\n    //     shadowRadius: 15,\r\n    //     shadowOpacity: 0.6\r\n    // },\r\n    // mat_grey_cover: {\r\n    //     backgroundColor: \"#595a4f\",\r\n    //     right: \"2%\",\r\n    //     width: \"11%\",\r\n    //     height: \"65%\",\r\n    //     top: \"20%\",\r\n    //     position: \"absolute\",\r\n    // },\r\n    // mat_goods_token_track: {\r\n    //     position: \"absolute\",\r\n    //     backgroundColor: \"#5aa57c\",\r\n    //     borderColor: \"#448c72\",\r\n    //     borderWidth: 5,\r\n    //     right: \"10%\",\r\n    //     height: Dimensions.get('window').width * 0.06,\r\n    //     width: \"17%\",\r\n    //     borderRadius: Math.round(Dimensions.get('window').height) * 0.1 / 2,\r\n    // },\r\n    // mat_bonus_token_track: {\r\n    //     position: \"absolute\",\r\n    //     backgroundColor: \"black\",\r\n    //     borderColor: \"gold\",\r\n    //     borderWidth: 3,\r\n    //     right: \"3%\",\r\n    //     width: Dimensions.get('window').width * 0.06,\r\n    //     height: Dimensions.get('window').width * 0.06,\r\n    //     borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\r\n    // },\r\n    // card: {\r\n    //     position: \"absolute\",\r\n    //     width: \"10%\",\r\n    //     height: \"20%\",\r\n    //     // width: Dimensions.get('window').width * 0.1,\r\n    //     // height: Dimensions.get('window').width * 0.2,\r\n    //     borderWidth: 1,\r\n    //     borderRadius: 15,\r\n    //     shadowColor: \"black\",\r\n    //     shadowRadius: 3,\r\n    //     shadowOffset: { width: 0, height: 0 },\r\n    //     shadowOpacity: 0.6,\r\n    //     backgroundColor: \"white\",\r\n    //     padding: \"6%\",\r\n    //     paddingTop: \"7%\",\r\n    //     paddingBottom: \"3%\",\r\n    // },\r\n    // token: {\r\n    //     borderWidth: 1,\r\n    //     borderColor: \"black\",\r\n    //     shadowColor: \"black\",\r\n    //     shadowRadius: 3,\r\n    //     shadowOffset: { width: 0, height: 0 },\r\n    //     shadowOpacity: 1,\r\n    //     overflow: \"hidden\",\r\n    //     borderRadius: Math.round(Dimensions.get('window').width + Dimensions.get('window').height) / 2,\r\n    //     width: Dimensions.get('window').width * 0.06,\r\n    //     height: Dimensions.get('window').width * 0.06,\r\n    //     position: \"absolute\",\r\n    // },\r\n    // buttonPanel: {\r\n    //     position: \"absolute\",\r\n    //     left: \"17%\",\r\n    //     height: \"4.5%\",\r\n    //     width: \"54%\",\r\n    //     justifyContent: \"center\",\r\n    //     display: \"flex\",\r\n    //     flexDirection: \"row\",\r\n    //     alignItems: \"center\",\r\n    //     alignContent: \"center\",\r\n    // },\r\n    // goodsTokenTrack: {\r\n    //     top: 20,\r\n    //     bottom: 76.7,\r\n    // },\r\n    // bonusTokenTrack: {\r\n    //     top: 30,\r\n    //     bottom: 67,\r\n    // }\r\n});\r\n\r\nexport default styles;","import React from 'react';\r\nimport { SafeAreaView, View, Text } from 'react-native';\r\n\r\nimport BaseBoard, { BoardProps } from '../BaseBoard';\r\nimport styles from \"./styles\";\r\nimport { MIN_WIDTH_HEIGHT } from \"../jaipur/styles\";\r\n\r\ntype State = {\r\n    players: string[];\r\n};\r\n\r\nexport default class CodenamesBoard extends React.Component<BoardProps, State> implements BaseBoard<State> {\r\n    constructor(props: BoardProps) {\r\n        super(props);\r\n        this.state = { players: [] };\r\n    }\r\n\r\n    updateBoard(state: State) {\r\n        this.setState(state);\r\n    }\r\n\r\n    updatePlayers(players: string[]) {\r\n        this.setState({ players });\r\n    }\r\n\r\n    renderPlayerSelection() {\r\n        const renderPlayerList = (team: string) => {\r\n            const teamName = (team == \"red\" ? \"Red\" : \"Blue\") + \" Team\";\r\n\r\n            return <View style={{\r\n                flex: 3,\r\n                backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n                borderRadius: MIN_WIDTH_HEIGHT(3),\r\n                margin: MIN_WIDTH_HEIGHT(2),\r\n                padding: MIN_WIDTH_HEIGHT(2),\r\n            }}>\r\n                <Text style={{\r\n                    textAlign: \"center\",\r\n                    color: team,\r\n                    fontSize: MIN_WIDTH_HEIGHT(3),\r\n                    textShadowColor: \"white\",\r\n                    textShadowRadius: 2,\r\n                }}>{teamName}</Text>\r\n                <Text>Hi</Text>\r\n            </View>;\r\n        };\r\n\r\n        return <View style={{ flex: 1, flexDirection: \"column\" }}>\r\n            <View style={{ flex: 1 }}>\r\n            </View>\r\n            <View style={{ flex: 5, flexDirection: \"row\" }}>\r\n                <View style={{ flex: 1 }}></View>\r\n                {renderPlayerList(\"red\")}\r\n                {renderPlayerList(\"blue\")}\r\n                <View style={{ flex: 1 }}></View>\r\n            </View>\r\n            <View style={{ flex: 1 }}></View>\r\n        </View>;\r\n    }\r\n\r\n    render() {\r\n        return <SafeAreaView style={styles.mat}>\r\n            {this.renderPlayerSelection()}\r\n        </SafeAreaView>;\r\n    }\r\n};\r\n","import React from 'react';\n\nimport socketIOClient from \"socket.io-client\";\nimport SequenceBoard from '../../components/sequence/SequenceBoard';\nimport SplendorBoard from '../../components/splendor/SplendorBoard';\nimport JaipurBoard from '../../components/jaipur/JaipurBoard';\nimport { SERVER_URI } from '../../config/constants';\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RootStackParamList } from \"../../../App\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport CodenamesBoard from \"../../components/codenames/CodenamesBoard\";\n\ntype BoardScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Board'>;\ntype BoardScreenRouteProp = RouteProp<RootStackParamList, 'Board'>;\ntype Props = { navigation: BoardScreenNavigationProp, route: BoardScreenRouteProp; };\n\nexport default class Board extends React.Component<Props> {\n    socket: SocketIOClient.Socket;\n    board: React.RefObject<JaipurBoard | SequenceBoard | SplendorBoard>;\n\n    constructor(props: Props) {\n        super(props);\n        this.board = React.createRef();\n    }\n\n    async componentDidMount() {\n        this.socket = socketIOClient(SERVER_URI, {\n            query: {\n                playerName: \"board\",\n                gameCode: this.props.route.params.gameCode,\n                gameName: this.props.route.params.gameName,\n                password: this.props.route.params.password,\n            },\n        });\n        this.socket.on(\"board\", (board: any) => {\n            if (Object.keys(board).length === 0) {\n                return;\n            }\n            this.board.current.updateBoard(board);\n        });\n        this.socket.on(\"players\", (players: any) => {\n            console.log(players);\n            if (players === null || players === undefined /*Object.keys(players).length === 0*/) {\n                return;\n            }\n            this.board.current.updatePlayers(players);\n        });\n    }\n\n    async componentWillUnmount() {\n        this.socket.close();\n    }\n\n    onStart = async () => {\n        this.socket.emit(\"start\");\n    };\n\n    onAction = async (action: any) => {\n        this.socket.emit(\"action\", action);\n    };\n\n    onBack = () => {\n        this.props.navigation.goBack();\n    };\n\n    render() {\n        const BoardImpl = (() => {\n            switch (this.props.route.params.gameName) {\n                case 'codenames':\n                    return CodenamesBoard;\n                case 'jaipur':\n                    return JaipurBoard;\n                case 'sequence':\n                    return SequenceBoard;\n                case 'splendor':\n                    return SplendorBoard;\n            }\n        })();\n        return <BoardImpl ref={this.board} onStart={this.onStart} onAction={this.onAction} onBack={this.onBack} />;\n    }\n};\n","import 'react-native-gesture-handler';\n\nimport React, { Component } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Home from \"./app/scenes/Home\";\nimport Hand from \"./app/scenes/Hand\";\nimport Board from \"./app/scenes/Board\";\n\nconsole.disableYellowBox = true;\n\nexport type RootStackParamList = {\n  Home: undefined;\n  Board: { gameName: string; gameCode: string; password: string; };\n  Hand: { playerName: string, gameName: string; gameCode: string; password: string; };\n};\nconst RootStack = createStackNavigator<RootStackParamList>();\n\nexport default class App extends Component {\n  render() {\n    return (\n      <NavigationContainer>\n        <RootStack.Navigator headerMode=\"screen\">\n          <RootStack.Screen name=\"Home\" component={Home} />\n          <RootStack.Screen name=\"Board\" component={Board} options={{ headerShown: false }} />\n          <RootStack.Screen name=\"Hand\" component={Hand} />\n        </RootStack.Navigator>\n      </NavigationContainer>\n    );\n  }\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/all-aboard-client/expo-service-worker.js', { scope: '/all-aboard-client/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/bonus_3_token.b7d6048e.png\";","module.exports = __webpack_public_path__ + \"static/media/bonus_4_token.9dbb865c.png\";","module.exports = __webpack_public_path__ + \"static/media/bonus_5_token.0b15f02d.png\";","module.exports = __webpack_public_path__ + \"static/media/camel_token.f1239e82.png\";","module.exports = __webpack_public_path__ + \"static/media/cloth_token.b45112dd.png\";","module.exports = __webpack_public_path__ + \"static/media/diamond_token.eb1081d0.png\";","module.exports = __webpack_public_path__ + \"static/media/gold_token.31dad298.png\";","module.exports = __webpack_public_path__ + \"static/media/leather_token.027cb7e8.png\";","module.exports = __webpack_public_path__ + \"static/media/seal_of_excellence.c17ff76a.png\";","module.exports = __webpack_public_path__ + \"static/media/silver_token.404ac8cc.png\";","module.exports = __webpack_public_path__ + \"static/media/spice_token.9a70cbc9.png\";","module.exports = __webpack_public_path__ + \"static/media/board.38645106.jpg\";","module.exports = __webpack_public_path__ + \"static/media/camel-char.87d3d7f8.png\";"],"sourceRoot":""}